{"name":"Class","tagline":"A Class Factory for JavaScript","body":"## The `Class` Factory\r\n\r\nThe `Class` factory is the *base* of all created *Classes*. This means that all\r\nClasses created by it automatically inherit from a special method `is` from it.\r\n\r\n`Class.is` basically works like `instanceof`, where first parameter would be \r\nthe left-hand value of the `instanceof` operator and the (optional) second \r\nparameter the right-hand value.\r\n\r\nThe `is` method is both Class and a Instance method:\r\n\r\n```javascript\r\n    var Foo = Class();\r\n    Class.is(Foo); // true\r\n    Class.is(Foo, Class); // true\r\n\r\n    new Foo().is(Class); // true\r\n    new Foo().is(Foo); // true\r\n```\r\n\r\n## Basic Usage\r\n\r\nTo create the most simple *Class* just pass in a function as the constructor and \r\nan object with the members into the `Class` factory:\r\n\r\n```javascript\r\n    var Foo = Class(function(value) {\r\n        this.value = value;\r\n\r\n    }, {\r\n        getValue: function() {\r\n            return this.value;\r\n        }\r\n    });\r\n\r\n    new Foo(1).getValue(); // 1\r\n```\r\n\r\n> Note: Both of the arguments are *optional* and either one can be left out.\r\n\r\n\r\n## Inheritance and Unbound Methods\r\n\r\nYou can pass any number of other *Classes* into the `Class` factory to make \r\nthe new class inherit from them.\r\n\r\nIf the first parameter to the factory is either a `function` or a `Class`, \r\nit will become the constructor of the new *Class*.\r\n\r\nIf a Class inherits from another one, it can call that Class's *unbound* \r\nconstructor from within it's own, passing *itself* as the instance argument:\r\n\r\n```javascript\r\n    var Bar = Class(function(value) {\r\n        Foo(this, value);\r\n\r\n    }, Foo, ... );\r\n\r\n```\r\n\r\nAll methods also have a unbound Class version available, this makes calling \r\nsuper methods easy.\r\n\r\n```javascript\r\n    var Bar = Class(... , Foo, {\r\n        method: function(value) {\r\n            return Foo.method(this, value);\r\n        }\r\n    });\r\n\r\n```\r\n\r\n## Static Fields and Methods\r\n\r\nAny field prefixed with a `$` will automatically become a static one:\r\n\r\n```javascript\r\n\r\n    var Baz = Class({\r\n        $fromFactory: function(data) {\r\n            return new Baz(data);\r\n        }\r\n    });\r\n\r\n    instance = Baz.fromFactory({ ... });\r\n```\r\n\r\n> Note: Static fields are direct references; thus, that they are shared \r\n> between any sub classes and their bases.\r\n\r\n\r\n## Wrapping `prototype` based structures into Classes\r\n\r\nFor easy integration of other `prototype` based code, you can simply wrap the \r\ndesired structures as classes:\r\n\r\n```javascript\r\n    var FooClass = Class(Foo, Foo.prototype);\r\n```\r\n\r\nThe `Class` factory will actually do the right thing here and will **not** \r\nconvert fields which are prefixed with `$` into statics in order to avoid \r\nbreaking existing code.\r\n\r\n## License\r\n\r\nLicensed under MIT.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}